def split_nodes_link(old_nodes):
    returnList = []
    print (old_nodes)
    for currentNode in old_nodes:
        textList = []
        regexedList = []
        regexDictionary = {}
        print(f"Current node's text: {currentNode.text}")
        regexedLinks = extract_markdown_link(currentNode.text)
        print(f"Regexed Links: {regexedLinks}")
        if regexedLinks:
            for currentLinkRegex in regexedLinks:
                regexDictionary[currentLinkRegex[0]] = currentLinkRegex[1]
                print (regexDictionary)
        preLinkRegexed = re.findall(r"(^.+)(?=\[[\w\s]\]\([\w\s]+\))", currentNode.text)
        linkExistanceCheck = re.findall(r"\[([^\]]+)\]", currentNode.text)
        if not preLinkRegexed and not linkExistanceCheck:
            returnList.append(currentNode)
            continue
        matchList = []

        for match in re.finditer(r"(?<!!)\[([^\]]+)\]\(([^\)]+)\)", currentNode.text):
            matchList.append((match.start(), match.group(0), 'link'))
        for match in re.finditer((r""), currentNode.text):
            print (f"Match list two: ", (match.start(), match.group(0), 'text'))
            matchList.append((match.start(), match.group(0), 'text'))
        matchList.sort(key=lambda x: x[0])
        print(f"Current match list: {matchList}\n")
        for currentMatch in matchList:
            if currentMatch[2] == 'text' and currentMatch[1].strip():
                textList.extend([
                    TextNode(currentMatch[1], TextType.NORMAL)
                ])
            if currentMatch[2] == 'link' and currentMatch[1].strip():
                dictionaryIndexer = currentMatch[1].strip("[]")
                textList.extend([
                    TextNode(dictionaryIndexer, TextType.LINKS, regexDictionary[dictionaryIndexer])
                ])
        #print (matchList)
        #print (f"Final return list: {textList}")
        returnList.extend(textList)
        textList = []
    return returnList


def split_nodes_image(old_nodes):
    returnList = []
    for currentNode in old_nodes:
        textList = []
        regexedList = []
        regexDictionary = {}
        #print(currentNode)
        #print (extract_markdown_images(currentNode.text))
        regexedImages = extract_markdown_images(currentNode.text)
        if regexedImages:
            for currentImageRegex in regexedImages:
                regexDictionary[currentImageRegex[0]] = currentImageRegex[1]
        #print (regexDictionary)
        preLinkRegexed = re.findall(r"(.+)(?=\!\[.+\])", currentNode.text)
        linkExistanceCheck = re.findall(r"!\[([^\]]+)\]", currentNode.text)
        if not preLinkRegexed and not linkExistanceCheck:
            returnList.append(currentNode)
            continue
        #print (preLinkRegexed)
        matchList = []
        for match in re.finditer((r"!\[([^\]]+)\]"), currentNode.text):
            matchList.append((match.start(), match.group(0), 'image'))
        for match in re.finditer((r"([\w\s*`.]+?)(?=\!\[[^\]]+\]\([^\)]+\)|\[[^\]]+\]\([^\)]+\)|$)"), currentNode.text):
            matchList.append((match.start(), match.group(0), 'text'))
        for match in re.finditer((r"(?<!!)\[([^\]]+)\]\(([^\)]+)\)"), currentNode.text):
            matchList.append((match.start(), match.group(0), 'text'))
        matchList.sort(key=lambda x: x[0])
        #print(f"Image matches: {[(m.start(), m.group(0)) for m in re.finditer(r'!\[([^\]]+)\]', currentNode.text)]}")
        #print(f"Text matches: {[(m.start(), m.group(0)) for m in re.finditer(r'([\w\s*`.]+?)(?=\!\[[^\]]+\]\([^\)]+\)|\[[^\]]+\]\([^\)]+\)|$)', currentNode.text)]}")
        #print(f"Link matches: {[(m.start(), m.group(0)) for m in re.finditer(r'(?<!!)\[([^\]]+)\]\(([^\)]+)\)', currentNode.text)]}")

        for currentMatch in matchList:
            #print(f"Current match here: {currentMatch}\n")
            #print (f"Regex dictionary here: {regexDictionary}\n")
            #print (f"Full match list here: {matchList}\n")
            if currentMatch[2] == 'text' and currentMatch[1]:
                textList.extend([
                    TextNode(currentMatch[1], TextType.NORMAL)
                ])
                #print ("Text extended")
            if currentMatch[2] == 'image' and currentMatch[1]:
                dictionaryIndexer = currentMatch[1].strip("![]")
                
                textList.extend([
                    TextNode(dictionaryIndexer, TextType.IMAGES, regexDictionary[dictionaryIndexer])
                ])
                #print ("Image link extended")
        #print (f"Current match list: {matchList}")
        returnList.extend(textList)
        textList = []
        regexDictionary = {}
    return returnList
